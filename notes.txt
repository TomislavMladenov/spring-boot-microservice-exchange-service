Няколко основни забележки.
# Функционални проблеми
    1. Няма нужда да добавяш http clienti spring има RestTemplate . Ползваш него за комуникация.
    2. Това дето си го кръстил DAO не е DAO . DAO - Data Access Object - ти никъде не работиш с базата
        - Твоето ExchangeDao е Exchange Service. Бизнес логиката, а комуникация с външна система е бизнес логика
        винаги трябва да се намира в сървис леъра.
    3. Обърни внимание как съм променил кода на сървисата ти.
    4. Обърни внимание как съм направил Exception-a.
    5. Exception-nite не са feature, тоест те не са в отделна структура , те са подчаст на фиичърите.
    6. Общите неща се слагат на общо място, тоест в "common" feature-a.
    7. Обърни внимание как се прави комуникацията със RestTemplate. Използвай него за да комуникираш с въшни сървиси.
        https://www.baeldung.com/rest-template
    8. Нямаш тестове - без тестове проекта не е завършен.
        https://www.baeldung.com/spring-boot-testing
    9. Използвай Ломбок. Конфигуриран е в момента и можеш да го използваш. Инсталирай си само плъгина за InteliJ.
        https://plugins.jetbrains.com/plugin/6317-lombok

# Secutiry
    1. Не бива пароли и креденшъли да се появяват в кода ни.
        - Единствено може да направиш изключение за локалният дев (localdev) профил. Не прекалявай обаче. Аз бих следил
        за тези неща в кода.


# Стилистични проблеми
    1. НИКОГА НЕ ТРЯБВА ДА ИМА РЕД ПОВЕЧЕ ОТ 120 символа. (InteliJ ти слага един сепаратор, внимавай за това. )
    2. НИКОГА НЕ ТРЯБВА ДА ИМА МЕТОД ПО–ГОЛЯМ ОТ 10 реда.
    3. Имената на пакетите много рядко са в много число,  обикновено само когато множественото число изрязява добре
       смисъла, който искаме да вложим в пакета и класовете в него.
       Удрай пo един формат на кода. INTELIJ-a помага, ползвай го - https://www.jetbrains.com/help/idea/reformat-and-rearrange-code.html
       Прочети този документ -> https://github.com/SierePos/backend-java-server/tree/SIERE-9/codestyle
    4. Махнал съм някой от build artifacts - ъпдейтнато е .gitignore-a


# Spring / Spring boot добри практики (Ще гледат за тези неща)
    1. Винаги използваме Interface! Никога не ползваме класовете и не иджеквтваме тях, а интерфейс които те имплементират.
    2. Винаги ползваме Constructor Injection. - https://www.baeldung.com/constructor-injection-in-spring
    3. Добре е системата ни да си има конфигурации за различните системи/ среди, в които ще я пускаме.
    4. Като цяло хората, предпочитат конфигурациите да са yaml. Според мен е по -четимо от properties в 95% от случаите.
    5. Хубаво е конфигурациите да са ти typesafe - https://www.baeldung.com/configuration-properties-in-spring-boot


Общи -
    1. Няма README.md - всеки добър проект трябва да има README, което да помага на хората как да си сетъпнат този проект.
    2. Няма тестове. Направи поне юнит и функционални тестове на кода си.
        - използвай мокове - Mockito и JFaker 